// EHR Outbound Integration - Export notes and TCM documentation

import { supabaseServer, tocTable } from '../../supabase-server';
import { PatientRepository } from '../repositories/patient';
import { EpisodeRepository } from '../repositories/episode';
import { EscalationRepository } from '../repositories/escalation';
import { Patient, Episode, OutreachPlan, EscalationTask, EpisodeMedication, NoteExport } from '@/types';

export class EHROutboundIntegration {
  // Generate TCM (Transitional Care Management) note
  static async generateTCMNote(episodeId: string): Promise<string> {
    const episode = await EpisodeRepository.findById(episodeId);
    if (!episode) throw new Error('Episode not found');

    const patient = await PatientRepository.findById(episode.patient_id);
    if (!patient) throw new Error('Patient not found');

    const tasks = await EscalationRepository.getTasksByEpisode(episodeId);
    const medications = await EpisodeRepository.getMedications(episodeId);

    // Get outreach attempts
    const { data: outreachPlan } = await supabaseServer
      .from(tocTable('outreach_plan'))
      .select('*')
      .eq('episode_id', episodeId)
      .single();

    const note = `
TRANSITIONAL CARE MANAGEMENT NOTE

PATIENT: ${patient.last_name}, ${patient.first_name}
MRN: ${patient.mrn || 'N/A'}
DOB: ${patient.dob}

EPISODE DETAILS:
Condition: ${this.getConditionName(episode.condition_code)}
Admission Date: ${new Date(episode.admit_at).toLocaleDateString()}
Discharge Date: ${new Date(episode.discharge_at).toLocaleDateString()}
Risk Score: ${episode.elixhauser_score || 'N/A'}

CARE COORDINATION ACTIVITIES:

1. POST-DISCHARGE OUTREACH:
${outreachPlan ? `
   - Outreach Status: ${outreachPlan.status}
   - Preferred Contact: ${outreachPlan.preferred_channel}
   - Language: ${outreachPlan.language_code}
   - Outreach Window: ${new Date(outreachPlan.window_start_at).toLocaleDateString()} - ${new Date(outreachPlan.window_end_at).toLocaleDateString()}
` : '   - No outreach plan created'}

2. MEDICATIONS RECONCILED (${medications.length}):
${medications.map(med => `   - ${med.name} ${med.dose}${med.dose_unit || ''} ${med.frequency || ''}`).join('\n')}

3. CLINICAL ESCALATIONS (${tasks.length}):
${tasks.length === 0 ? '   - None' : tasks.map(task => `
   - ${task.severity} priority
   - Reason: ${task.reason_codes.join(', ')}
   - Status: ${task.status}
   - ${task.resolved_at ? `Resolved: ${new Date(task.resolved_at).toLocaleDateString()}` : 'In Progress'}
`).join('\n')}

4. INTERACTIVE CONTACT:
${outreachPlan?.status === 'COMPLETED' ? `
   Interactive contact completed via ${outreachPlan.preferred_channel}
   Patient education provided regarding:
   - Medication adherence
   - Red flag symptoms
   - Follow-up appointments
` : '   Attempted outreach, awaiting completion'}

BILLING CODES:
- CPT 99495 (TCM - moderate complexity) or
- CPT 99496 (TCM - high complexity)
  ${episode.elixhauser_score && episode.elixhauser_score > 15 ? '[High complexity recommended based on risk score]' : ''}

Date of Service: ${new Date().toLocaleDateString()}
Provider: [To be completed]

---
Generated by TOC Platform
`;

    return note;
  }

  // Export note to EHR (stub - implement with actual EHR API)
  static async exportToEHR(episodeId: string, destination: 'EHR_INBOX' | 'SECURE_FAX' | 'DIRECT_MSG') {
    const note = await this.generateTCMNote(episodeId);

    // Save to database
    await supabaseServer.from(tocTable('note_export')).insert({
      episode_id: episodeId,
      destination,
      note_hash: this.hashNote(note),
      exported_at: new Date().toISOString()
    });

    // TODO: Implement actual export based on destination
    switch (destination) {
      case 'EHR_INBOX':
        // POST to EHR API
        console.log('[EHR-Outbound] Would send to EHR inbox');
        break;
      case 'SECURE_FAX':
        // Send via fax API
        console.log('[EHR-Outbound] Would send via secure fax');
        break;
      case 'DIRECT_MSG':
        // Send via Direct secure messaging
        console.log('[EHR-Outbound] Would send via Direct messaging');
        break;
    }

    return { success: true, note };
  }

  private static getConditionName(code: string): string {
    const names: Record<string, string> = {
      HF: 'Heart Failure',
      COPD: 'Chronic Obstructive Pulmonary Disease',
      AMI: 'Acute Myocardial Infarction',
      PNA: 'Pneumonia'
    };
    return names[code] || code;
  }

  private static hashNote(note: string): string {
    // Simple hash for deduplication
    return Buffer.from(note).toString('base64').substring(0, 32);
  }
}

